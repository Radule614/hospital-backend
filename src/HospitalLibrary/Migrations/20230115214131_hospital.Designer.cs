// <auto-generated />
using System;
using System.Collections.Generic;
using HospitalLibrary.Core.Model;
using HospitalLibrary.Settings;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HospitalLibrary.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    [Migration("20230115214131_hospital")]
    partial class hospital
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AllergenMedicalRecord", b =>
                {
                    b.Property<int>("AllergensAllergenId")
                        .HasColumnType("integer");

                    b.Property<int>("MedicalRecordsId")
                        .HasColumnType("integer");

                    b.HasKey("AllergensAllergenId", "MedicalRecordsId");

                    b.HasIndex("MedicalRecordsId");

                    b.ToTable("AllergenMedicalRecord");
                });

            modelBuilder.Entity("DoctorPatient", b =>
                {
                    b.Property<int>("DoctorsDoctorId")
                        .HasColumnType("integer");

                    b.Property<int>("PatientsPatientId")
                        .HasColumnType("integer");

                    b.HasKey("DoctorsDoctorId", "PatientsPatientId");

                    b.HasIndex("PatientsPatientId");

                    b.ToTable("DoctorPatient");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Allergen", b =>
                {
                    b.Property<int>("AllergenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("AllergenId");

                    b.ToTable("Allergens");

                    b.HasData(
                        new
                        {
                            AllergenId = 1,
                            Name = "Peanuts"
                        },
                        new
                        {
                            AllergenId = 2,
                            Name = "Dust"
                        },
                        new
                        {
                            AllergenId = 3,
                            Name = "Fungal spores"
                        },
                        new
                        {
                            AllergenId = 4,
                            Name = "Insect and mite feces"
                        },
                        new
                        {
                            AllergenId = 5,
                            Name = "Insect bites and stinges (their venom)"
                        },
                        new
                        {
                            AllergenId = 6,
                            Name = "Pollen"
                        },
                        new
                        {
                            AllergenId = 7,
                            Name = "Milk and/or dairy products"
                        },
                        new
                        {
                            AllergenId = 8,
                            Name = "Eggs"
                        },
                        new
                        {
                            AllergenId = 9,
                            Name = "Wheat"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.Property<int?>("PhysicianScheduleId")
                        .HasColumnType("integer");

                    b.Property<DateRange>("ScheduledDate")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhysicianScheduleId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Bed", b =>
                {
                    b.Property<int>("BedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<int?>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("BedId");

                    b.HasIndex("RoomId");

                    b.ToTable("Beds");

                    b.HasData(
                        new
                        {
                            BedId = 1,
                            IsAvailable = false,
                            Label = "201B1"
                        },
                        new
                        {
                            BedId = 2,
                            IsAvailable = true,
                            Label = "201B2"
                        },
                        new
                        {
                            BedId = 3,
                            IsAvailable = true,
                            Label = "201B3"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Blood", b =>
                {
                    b.Property<int>("BloodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<double>("QuantityInLiters")
                        .HasColumnType("double precision");

                    b.HasKey("BloodId");

                    b.ToTable("Bloods");

                    b.HasData(
                        new
                        {
                            BloodId = 1,
                            BloodType = 6,
                            QuantityInLiters = 4.0
                        },
                        new
                        {
                            BloodId = 2,
                            BloodType = 0,
                            QuantityInLiters = 4.0
                        },
                        new
                        {
                            BloodId = 3,
                            BloodType = 2,
                            QuantityInLiters = 4.0
                        },
                        new
                        {
                            BloodId = 4,
                            BloodType = 4,
                            QuantityInLiters = 4.0
                        },
                        new
                        {
                            BloodId = 5,
                            BloodType = 7,
                            QuantityInLiters = 4.0
                        },
                        new
                        {
                            BloodId = 6,
                            BloodType = 1,
                            QuantityInLiters = 4.0
                        },
                        new
                        {
                            BloodId = 7,
                            BloodType = 3,
                            QuantityInLiters = 4.0
                        },
                        new
                        {
                            BloodId = 8,
                            BloodType = 5,
                            QuantityInLiters = 4.0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.BloodRequest", b =>
                {
                    b.Property<int>("BloodRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FinalDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("QuantityInLiters")
                        .HasColumnType("double precision");

                    b.Property<string>("ReasonForRequest")
                        .HasColumnType("text");

                    b.HasKey("BloodRequestId");

                    b.ToTable("BloodRequests");

                    b.HasData(
                        new
                        {
                            BloodRequestId = 1,
                            BloodType = 5,
                            DoctorId = 1,
                            FinalDate = new DateTime(2022, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuantityInLiters = 2.5,
                            ReasonForRequest = "Heart surgery"
                        },
                        new
                        {
                            BloodRequestId = 2,
                            BloodType = 0,
                            DoctorId = 1,
                            FinalDate = new DateTime(2022, 11, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuantityInLiters = 3.0,
                            ReasonForRequest = "Heart surgery"
                        },
                        new
                        {
                            BloodRequestId = 3,
                            BloodType = 7,
                            DoctorId = 1,
                            FinalDate = new DateTime(2022, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            QuantityInLiters = 3.5,
                            ReasonForRequest = "Heart surgery"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.BloodTherapy", b =>
                {
                    b.Property<int>("BloodTherapyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("InpatientTreatmentTherapyId")
                        .HasColumnType("integer");

                    b.Property<double>("QuantityInLiters")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("BloodTherapyId");

                    b.HasIndex("InpatientTreatmentTherapyId");

                    b.ToTable("BloodTherapies");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.BloodUsageEvidency", b =>
                {
                    b.Property<int>("BloodUsageEvidencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfUsage")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<double>("QuantityUsedInMililiters")
                        .HasColumnType("double precision");

                    b.Property<string>("ReasonForUsage")
                        .HasColumnType("text");

                    b.HasKey("BloodUsageEvidencyId");

                    b.ToTable("BloodUsageEvidencies");

                    b.HasData(
                        new
                        {
                            BloodUsageEvidencyId = 1,
                            BloodType = 0,
                            DateOfUsage = new DateTime(2022, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            QuantityUsedInMililiters = 200.0,
                            ReasonForUsage = "Hearth surgery"
                        },
                        new
                        {
                            BloodUsageEvidencyId = 2,
                            BloodType = 3,
                            DateOfUsage = new DateTime(2022, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            QuantityUsedInMililiters = 300.0,
                            ReasonForUsage = "Hearth surgery"
                        },
                        new
                        {
                            BloodUsageEvidencyId = 3,
                            BloodType = 6,
                            DateOfUsage = new DateTime(2022, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            QuantityUsedInMililiters = 450.0,
                            ReasonForUsage = "Hearth surgery"
                        },
                        new
                        {
                            BloodUsageEvidencyId = 4,
                            BloodType = 0,
                            DateOfUsage = new DateTime(2022, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            QuantityUsedInMililiters = 700.0,
                            ReasonForUsage = "Hearth surgery"
                        },
                        new
                        {
                            BloodUsageEvidencyId = 5,
                            BloodType = 3,
                            DateOfUsage = new DateTime(2022, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            QuantityUsedInMililiters = 180.0,
                            ReasonForUsage = "Hearth surgery"
                        },
                        new
                        {
                            BloodUsageEvidencyId = 6,
                            BloodType = 5,
                            DateOfUsage = new DateTime(2022, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            QuantityUsedInMililiters = 1100.0,
                            ReasonForUsage = "Hearth surgery"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Consilium", b =>
                {
                    b.Property<int>("ConsiliumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateRange>("DateRange")
                        .HasColumnType("jsonb");

                    b.Property<List<int>>("DoctorIds")
                        .HasColumnType("integer[]");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<List<int>>("SpecializationIds")
                        .HasColumnType("integer[]");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Topic")
                        .HasColumnType("text");

                    b.HasKey("ConsiliumId");

                    b.ToTable("Consiliums");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DoctorId");

                    b.HasIndex("RoomId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            Name = "Ognjen",
                            RoomId = 1,
                            SpecializationId = 3,
                            Surname = "Nikolic"
                        },
                        new
                        {
                            DoctorId = 2,
                            Name = "Mika",
                            RoomId = 2,
                            SpecializationId = 1,
                            Surname = "Mikic"
                        },
                        new
                        {
                            DoctorId = 3,
                            Name = "Aleksa",
                            RoomId = 1,
                            SpecializationId = 2,
                            Surname = "Santic"
                        },
                        new
                        {
                            DoctorId = 4,
                            Name = "Nikola",
                            RoomId = 1,
                            SpecializationId = 3,
                            Surname = "Peric"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.ExaminationReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.Property<string>("Report")
                        .HasColumnType("text");

                    b.Property<List<int>>("SymptomIds")
                        .HasColumnType("integer[]");

                    b.HasKey("Id");

                    b.ToTable("ExaminationReports");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.InpatientTreatment", b =>
                {
                    b.Property<int>("InpatientTreatmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BedId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfAdmission")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.Property<string>("ReasonForAdmission")
                        .HasColumnType("text");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("InpatientTreatmentId");

                    b.HasIndex("BedId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("InpatientTreatments");

                    b.HasData(
                        new
                        {
                            InpatientTreatmentId = 1,
                            BedId = 1,
                            DateOfAdmission = new DateTime(2022, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            ReasonForAdmission = "Headache",
                            RoomId = 21
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.InpatientTreatmentTherapy", b =>
                {
                    b.Property<int>("InpatientTreatmentTherapyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("InpatientTreatmentId")
                        .HasColumnType("integer");

                    b.HasKey("InpatientTreatmentTherapyId");

                    b.HasIndex("InpatientTreatmentId");

                    b.ToTable("InpatientTreatmentTherapies");

                    b.HasData(
                        new
                        {
                            InpatientTreatmentTherapyId = 1,
                            InpatientTreatmentId = 1
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BloodType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("MedicalRecords");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BloodType = 0
                        },
                        new
                        {
                            Id = 2,
                            BloodType = 6
                        },
                        new
                        {
                            Id = 3,
                            BloodType = 5
                        },
                        new
                        {
                            Id = 4,
                            BloodType = 2
                        },
                        new
                        {
                            Id = 5,
                            BloodType = 7
                        },
                        new
                        {
                            Id = 6,
                            BloodType = 1
                        },
                        new
                        {
                            Id = 7,
                            BloodType = 4
                        },
                        new
                        {
                            Id = 8,
                            BloodType = 7
                        },
                        new
                        {
                            Id = 9,
                            BloodType = 3
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Medicine", b =>
                {
                    b.Property<int>("MedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Manufacturer")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("RecipeId")
                        .HasColumnType("integer");

                    b.HasKey("MedicineId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Medicines");

                    b.HasData(
                        new
                        {
                            MedicineId = 1,
                            Manufacturer = "Galenika",
                            Name = "Aspirin"
                        },
                        new
                        {
                            MedicineId = 2,
                            Manufacturer = "Hemofarm",
                            Name = "Bromazepam"
                        },
                        new
                        {
                            MedicineId = 3,
                            Manufacturer = "Hemofarm",
                            Name = "Caffetin"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.MedicineTherapy", b =>
                {
                    b.Property<int>("MedicineTherapyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Dosage")
                        .HasColumnType("text");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("InpatientTreatmentTherapyId")
                        .HasColumnType("integer");

                    b.Property<int>("MedicineId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("MedicineTherapyId");

                    b.HasIndex("InpatientTreatmentTherapyId");

                    b.HasIndex("MedicineId");

                    b.ToTable("MedicineTherapies");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.MoveRequest", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("chosenStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("duration")
                        .HasColumnType("interval");

                    b.Property<string>("equipment")
                        .HasColumnType("text");

                    b.Property<int>("fromRoomId")
                        .HasColumnType("integer");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.Property<int>("toRoomId")
                        .HasColumnType("integer");

                    b.Property<string>("type")
                        .HasColumnType("text");

                    b.Property<DateTime>("wantedEndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("wantedStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("id");

                    b.ToTable("MoveRequests");

                    b.HasData(
                        new
                        {
                            id = 1,
                            chosenStartTime = new DateTime(2022, 12, 10, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            duration = new TimeSpan(0, 0, 30, 0, 0),
                            equipment = "Syringe",
                            fromRoomId = 1,
                            quantity = 2,
                            toRoomId = 2,
                            type = "EquipmentMove",
                            wantedEndTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            wantedStartTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("PatientId")
                        .HasColumnType("integer");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsAccountActivated")
                        .HasColumnType("boolean");

                    b.Property<int>("MedicalRecord")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("PatientId");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            PatientId = 1,
                            IsAccountActivated = false,
                            MedicalRecord = 1,
                            Name = "Pera",
                            Surname = "Peric",
                            UserId = 0
                        },
                        new
                        {
                            PatientId = 2,
                            IsAccountActivated = false,
                            MedicalRecord = 2,
                            Name = "Marko",
                            Surname = "Markovic",
                            UserId = 0
                        },
                        new
                        {
                            PatientId = 3,
                            IsAccountActivated = false,
                            MedicalRecord = 3,
                            Name = "Aleksa",
                            Surname = "Aleksic",
                            UserId = 0
                        },
                        new
                        {
                            PatientId = 4,
                            IsAccountActivated = false,
                            MedicalRecord = 4,
                            Name = "Pera",
                            Surname = "Peric",
                            UserId = 0
                        },
                        new
                        {
                            PatientId = 5,
                            IsAccountActivated = false,
                            MedicalRecord = 5,
                            Name = "Marko",
                            Surname = "Markovic",
                            UserId = 0
                        },
                        new
                        {
                            PatientId = 6,
                            IsAccountActivated = false,
                            MedicalRecord = 6,
                            Name = "Aleksa",
                            Surname = "Aleksic",
                            UserId = 0
                        },
                        new
                        {
                            PatientId = 7,
                            IsAccountActivated = false,
                            MedicalRecord = 7,
                            Name = "Pera",
                            Surname = "Peric",
                            UserId = 0
                        },
                        new
                        {
                            PatientId = 8,
                            IsAccountActivated = false,
                            MedicalRecord = 8,
                            Name = "Marko",
                            Surname = "Markovic",
                            UserId = 0
                        },
                        new
                        {
                            PatientId = 9,
                            IsAccountActivated = false,
                            MedicalRecord = 9,
                            Name = "Aleksa",
                            Surname = "Aleksic",
                            UserId = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.PhysicianSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<List<WorkTime>>("WorkTimes")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("PhysicianSchedules");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ExaminationReportId")
                        .HasColumnType("integer");

                    b.Property<List<int>>("MedicineIds")
                        .HasColumnType("integer[]");

                    b.Property<string>("WayOfUse")
                        .HasColumnType("text");

                    b.HasKey("RecipeId");

                    b.HasIndex("ExaminationReportId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BuildingId")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("FloorId")
                        .HasColumnType("integer");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.Property<int>("X")
                        .HasColumnType("integer");

                    b.Property<int>("Y")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuildingId = "A",
                            Description = "neki opis",
                            FloorId = 0,
                            Height = 250,
                            Number = "101A",
                            Type = 0,
                            Width = 380,
                            X = 10,
                            Y = 10
                        },
                        new
                        {
                            Id = 2,
                            BuildingId = "A",
                            Description = "neki opis1",
                            FloorId = 0,
                            Height = 250,
                            Number = "102A",
                            Type = 0,
                            Width = 170,
                            X = 10,
                            Y = 270
                        },
                        new
                        {
                            Id = 3,
                            BuildingId = "A",
                            Description = "neki opis2",
                            FloorId = 0,
                            Height = 250,
                            Number = "103A",
                            Type = 0,
                            Width = 170,
                            X = 10,
                            Y = 530
                        },
                        new
                        {
                            Id = 4,
                            BuildingId = "A",
                            Description = "neki opis",
                            FloorId = 0,
                            Height = 250,
                            Number = "104A",
                            Type = 0,
                            Width = 170,
                            X = 220,
                            Y = 270
                        },
                        new
                        {
                            Id = 5,
                            BuildingId = "A",
                            Description = "neki opis1",
                            FloorId = 0,
                            Height = 250,
                            Number = "105A",
                            Type = 0,
                            Width = 170,
                            X = 220,
                            Y = 530
                        },
                        new
                        {
                            Id = 6,
                            BuildingId = "A",
                            Description = "neki opis3",
                            FloorId = 1,
                            Height = 250,
                            Number = "201A",
                            Type = 0,
                            Width = 380,
                            X = 10,
                            Y = 10
                        },
                        new
                        {
                            Id = 7,
                            BuildingId = "A",
                            Description = "neki opis4",
                            FloorId = 1,
                            Height = 250,
                            Number = "202A",
                            Type = 0,
                            Width = 170,
                            X = 10,
                            Y = 270
                        },
                        new
                        {
                            Id = 8,
                            BuildingId = "A",
                            Description = "neki opis5",
                            FloorId = 1,
                            Height = 250,
                            Number = "203A",
                            Type = 0,
                            Width = 170,
                            X = 10,
                            Y = 530
                        },
                        new
                        {
                            Id = 9,
                            BuildingId = "A",
                            Description = "neki opis4",
                            FloorId = 1,
                            Height = 250,
                            Number = "204A",
                            Type = 0,
                            Width = 170,
                            X = 220,
                            Y = 270
                        },
                        new
                        {
                            Id = 10,
                            BuildingId = "A",
                            Description = "neki opis5",
                            FloorId = 1,
                            Height = 250,
                            Number = "205A",
                            Type = 0,
                            Width = 170,
                            X = 220,
                            Y = 530
                        },
                        new
                        {
                            Id = 11,
                            BuildingId = "A",
                            Description = "neki opis6",
                            FloorId = 2,
                            Height = 250,
                            Number = "301A",
                            Type = 0,
                            Width = 380,
                            X = 10,
                            Y = 10
                        },
                        new
                        {
                            Id = 12,
                            BuildingId = "A",
                            Description = "neki opis7",
                            FloorId = 2,
                            Height = 250,
                            Number = "302A",
                            Type = 0,
                            Width = 170,
                            X = 10,
                            Y = 270
                        },
                        new
                        {
                            Id = 13,
                            BuildingId = "A",
                            Description = "neki opis8",
                            FloorId = 2,
                            Height = 250,
                            Number = "303A",
                            Type = 0,
                            Width = 170,
                            X = 10,
                            Y = 530
                        },
                        new
                        {
                            Id = 14,
                            BuildingId = "A",
                            Description = "neki opis7",
                            FloorId = 2,
                            Height = 250,
                            Number = "304A",
                            Type = 0,
                            Width = 170,
                            X = 220,
                            Y = 270
                        },
                        new
                        {
                            Id = 15,
                            BuildingId = "A",
                            Description = "neki opis8",
                            FloorId = 2,
                            Height = 250,
                            Number = "305A",
                            Type = 0,
                            Width = 170,
                            X = 220,
                            Y = 530
                        },
                        new
                        {
                            Id = 16,
                            BuildingId = "B",
                            Description = "neki opis",
                            FloorId = 0,
                            Height = 250,
                            Number = "101B",
                            Type = 0,
                            Width = 485,
                            X = 10,
                            Y = 10
                        },
                        new
                        {
                            Id = 17,
                            BuildingId = "B",
                            Description = "neki opis1",
                            FloorId = 0,
                            Height = 250,
                            Number = "102B",
                            Type = 0,
                            Width = 480,
                            X = 505,
                            Y = 10
                        },
                        new
                        {
                            Id = 18,
                            BuildingId = "B",
                            Description = "neki opis2",
                            FloorId = 0,
                            Height = 250,
                            Number = "103B",
                            Type = 0,
                            Width = 283,
                            X = 10,
                            Y = 270
                        },
                        new
                        {
                            Id = 19,
                            BuildingId = "B",
                            Description = "neki opis",
                            FloorId = 0,
                            Height = 250,
                            Number = "104B",
                            Type = 0,
                            Width = 283,
                            X = 10,
                            Y = 530
                        },
                        new
                        {
                            Id = 20,
                            BuildingId = "B",
                            Description = "neki opis1",
                            FloorId = 0,
                            Height = 250,
                            Number = "105B",
                            Type = 0,
                            Width = 283,
                            X = 358,
                            Y = 270
                        },
                        new
                        {
                            Id = 21,
                            BuildingId = "B",
                            Description = "neki opis2",
                            FloorId = 0,
                            Height = 250,
                            Number = "106B",
                            Type = 0,
                            Width = 283,
                            X = 358,
                            Y = 530
                        },
                        new
                        {
                            Id = 22,
                            BuildingId = "B",
                            Description = "neki opis1",
                            FloorId = 0,
                            Height = 250,
                            Number = "107B",
                            Type = 0,
                            Width = 282,
                            X = 706,
                            Y = 270
                        },
                        new
                        {
                            Id = 23,
                            BuildingId = "B",
                            Description = "neki opis2",
                            FloorId = 0,
                            Height = 250,
                            Number = "108B",
                            Type = 0,
                            Width = 282,
                            X = 706,
                            Y = 530
                        },
                        new
                        {
                            Id = 24,
                            BuildingId = "B",
                            Description = "neki opis",
                            FloorId = 1,
                            Height = 250,
                            Number = "201B",
                            Type = 0,
                            Width = 485,
                            X = 10,
                            Y = 10
                        },
                        new
                        {
                            Id = 25,
                            BuildingId = "B",
                            Description = "neki opis1",
                            FloorId = 1,
                            Height = 250,
                            Number = "202B",
                            Type = 0,
                            Width = 480,
                            X = 505,
                            Y = 10
                        },
                        new
                        {
                            Id = 26,
                            BuildingId = "B",
                            Description = "neki opis2",
                            FloorId = 1,
                            Height = 250,
                            Number = "203B",
                            Type = 0,
                            Width = 283,
                            X = 10,
                            Y = 270
                        },
                        new
                        {
                            Id = 27,
                            BuildingId = "B",
                            Description = "neki opis",
                            FloorId = 1,
                            Height = 250,
                            Number = "204B",
                            Type = 0,
                            Width = 283,
                            X = 10,
                            Y = 530
                        },
                        new
                        {
                            Id = 28,
                            BuildingId = "B",
                            Description = "neki opis1",
                            FloorId = 1,
                            Height = 250,
                            Number = "205B",
                            Type = 0,
                            Width = 283,
                            X = 358,
                            Y = 270
                        },
                        new
                        {
                            Id = 29,
                            BuildingId = "B",
                            Description = "neki opis2",
                            FloorId = 1,
                            Height = 250,
                            Number = "206B",
                            Type = 0,
                            Width = 283,
                            X = 358,
                            Y = 530
                        },
                        new
                        {
                            Id = 30,
                            BuildingId = "B",
                            Description = "neki opis1",
                            FloorId = 1,
                            Height = 250,
                            Number = "207B",
                            Type = 0,
                            Width = 282,
                            X = 706,
                            Y = 270
                        },
                        new
                        {
                            Id = 31,
                            BuildingId = "B",
                            Description = "neki opis2",
                            FloorId = 1,
                            Height = 250,
                            Number = "208B",
                            Type = 0,
                            Width = 282,
                            X = 706,
                            Y = 530
                        },
                        new
                        {
                            Id = 32,
                            BuildingId = "B",
                            Description = "neki opis",
                            FloorId = 2,
                            Height = 250,
                            Number = "301B",
                            Type = 0,
                            Width = 485,
                            X = 10,
                            Y = 10
                        },
                        new
                        {
                            Id = 33,
                            BuildingId = "B",
                            Description = "neki opis1",
                            FloorId = 2,
                            Height = 250,
                            Number = "302B",
                            Type = 0,
                            Width = 480,
                            X = 505,
                            Y = 10
                        },
                        new
                        {
                            Id = 34,
                            BuildingId = "B",
                            Description = "neki opis2",
                            FloorId = 2,
                            Height = 250,
                            Number = "303B",
                            Type = 0,
                            Width = 283,
                            X = 10,
                            Y = 270
                        },
                        new
                        {
                            Id = 35,
                            BuildingId = "B",
                            Description = "neki opis",
                            FloorId = 2,
                            Height = 250,
                            Number = "304B",
                            Type = 0,
                            Width = 283,
                            X = 10,
                            Y = 530
                        },
                        new
                        {
                            Id = 36,
                            BuildingId = "B",
                            Description = "neki opis1",
                            FloorId = 2,
                            Height = 250,
                            Number = "305B",
                            Type = 0,
                            Width = 283,
                            X = 358,
                            Y = 270
                        },
                        new
                        {
                            Id = 37,
                            BuildingId = "B",
                            Description = "neki opis2",
                            FloorId = 2,
                            Height = 250,
                            Number = "306B",
                            Type = 0,
                            Width = 283,
                            X = 358,
                            Y = 530
                        },
                        new
                        {
                            Id = 38,
                            BuildingId = "B",
                            Description = "neki opis1",
                            FloorId = 2,
                            Height = 250,
                            Number = "307B",
                            Type = 0,
                            Width = 282,
                            X = 706,
                            Y = 270
                        },
                        new
                        {
                            Id = 39,
                            BuildingId = "B",
                            Description = "neki opis2",
                            FloorId = 2,
                            Height = 250,
                            Number = "308B",
                            Type = 0,
                            Width = 282,
                            X = 706,
                            Y = 530
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Specialization", b =>
                {
                    b.Property<int>("SpecializationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SpecializationId");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            SpecializationId = 1,
                            Name = "Anesthesiology"
                        },
                        new
                        {
                            SpecializationId = 2,
                            Name = "Dermatology"
                        },
                        new
                        {
                            SpecializationId = 3,
                            Name = "Family medicine"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Symptom", b =>
                {
                    b.Property<int>("SymptomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ExaminationReportId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SymptomId");

                    b.HasIndex("ExaminationReportId");

                    b.ToTable("Symptoms");

                    b.HasData(
                        new
                        {
                            SymptomId = 1,
                            Name = "High blood presure"
                        },
                        new
                        {
                            SymptomId = 2,
                            Name = "Sore throat"
                        },
                        new
                        {
                            SymptomId = 3,
                            Name = "Elevated body temperature"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Vacation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PhysicianScheduleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PhysicianScheduleId");

                    b.ToTable("Vacations");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.VacationRequest", b =>
                {
                    b.Property<int>("VacationRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DoctorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Urgency")
                        .HasColumnType("text");

                    b.HasKey("VacationRequestId");

                    b.ToTable("VacationRequests");

                    b.HasData(
                        new
                        {
                            VacationRequestId = 1,
                            DoctorId = 4,
                            EndDate = new DateTime(2023, 1, 30, 22, 41, 30, 298, DateTimeKind.Local).AddTicks(8982),
                            Reason = "Tired",
                            StartDate = new DateTime(2023, 1, 25, 22, 41, 30, 295, DateTimeKind.Local).AddTicks(5443),
                            Status = 1,
                            Urgency = "NoUrgent"
                        },
                        new
                        {
                            VacationRequestId = 2,
                            DoctorId = 4,
                            EndDate = new DateTime(2023, 2, 4, 22, 41, 30, 299, DateTimeKind.Local).AddTicks(1090),
                            Reason = "Tired",
                            StartDate = new DateTime(2023, 1, 30, 22, 41, 30, 299, DateTimeKind.Local).AddTicks(1070),
                            Status = 2,
                            Urgency = "Urgent"
                        },
                        new
                        {
                            VacationRequestId = 3,
                            DoctorId = 4,
                            EndDate = new DateTime(2023, 2, 9, 22, 41, 30, 299, DateTimeKind.Local).AddTicks(1098),
                            Reason = "Tired",
                            StartDate = new DateTime(2023, 2, 4, 22, 41, 30, 299, DateTimeKind.Local).AddTicks(1095),
                            Status = 0,
                            Urgency = "NoUrgent"
                        });
                });

            modelBuilder.Entity("HospitalLibrary.EventSourcing.Infrastructure.DomainEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("DomainEvent");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DomainEvent");
                });

            modelBuilder.Entity("HospitalLibrary.EventSourcing.Infrastructure.EventStream", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EventStreams");
                });

            modelBuilder.Entity("HospitalLibrary.EventSourcing.Infrastructure.EventWrapper", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uuid");

                    b.Property<int>("EventNumber")
                        .HasColumnType("integer");

                    b.Property<string>("EventStreamId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventWrappers");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Date")
                        .HasColumnType("text");

                    b.Property<bool>("IsDisplayedPublic")
                        .HasColumnType("boolean");

                    b.Property<int?>("PatientId")
                        .HasColumnType("integer");

                    b.Property<bool>("Privatisation")
                        .HasColumnType("boolean");

                    b.Property<string>("Textt")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = "25.10.2022",
                            IsDisplayedPublic = false,
                            PatientId = 5,
                            Privatisation = false,
                            Textt = "Awesome clinic!"
                        },
                        new
                        {
                            Id = 2,
                            Date = "25.10.2022",
                            IsDisplayedPublic = false,
                            PatientId = 5,
                            Privatisation = false,
                            Textt = "It's okay... I guess."
                        },
                        new
                        {
                            Id = 3,
                            Date = "25.10.2022",
                            IsDisplayedPublic = false,
                            PatientId = 5,
                            Privatisation = false,
                            Textt = "Awful."
                        });
                });

            modelBuilder.Entity("HospitalLibrary.HospitalMap.Model.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EquipmentType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Equipment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EquipmentType = 1,
                            Name = "Syringe",
                            Quantity = 50,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            EquipmentType = 1,
                            Name = "Tounge depressor",
                            Quantity = 32,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 3,
                            EquipmentType = 1,
                            Name = "Gloves",
                            Quantity = 50,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 4,
                            EquipmentType = 1,
                            Name = "Scissors",
                            Quantity = 10,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 5,
                            EquipmentType = 1,
                            Name = "Wheelchairs",
                            Quantity = 2,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 6,
                            EquipmentType = 1,
                            Name = "Scalpel",
                            Quantity = 4,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 7,
                            EquipmentType = 1,
                            Name = "Defibrillator",
                            Quantity = 2,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 8,
                            EquipmentType = 1,
                            Name = "Ultrasound ",
                            Quantity = 1,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 9,
                            EquipmentType = 1,
                            Name = "CT scanner",
                            Quantity = 2,
                            RoomId = 4
                        },
                        new
                        {
                            Id = 10,
                            EquipmentType = 1,
                            Name = "Tounge depressor",
                            Quantity = 12,
                            RoomId = 5
                        });
                });

            modelBuilder.Entity("HospitalLibrary.RenovationEventSourcing.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("HospitalLibrary.SharedModel.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "doctor1",
                            Password = "doctor1",
                            Role = 1
                        },
                        new
                        {
                            UserId = 2,
                            Email = "doctor2",
                            Password = "doctor2",
                            Role = 1
                        },
                        new
                        {
                            UserId = 3,
                            Email = "doctor3",
                            Password = "doctor3",
                            Role = 1
                        },
                        new
                        {
                            UserId = 4,
                            Email = "doctor4",
                            Password = "doctor4",
                            Role = 1
                        },
                        new
                        {
                            UserId = 5,
                            Email = "email",
                            Password = "password",
                            Role = 0
                        });
                });

            modelBuilder.Entity("HospitalLibrary.EventSourcing.Model.ExaminationEvents.ExaminationFinished", b =>
                {
                    b.HasBaseType("HospitalLibrary.EventSourcing.Infrastructure.DomainEvent");

                    b.HasDiscriminator().HasValue("ExaminationFinished");
                });

            modelBuilder.Entity("HospitalLibrary.EventSourcing.Model.ExaminationEvents.ExaminationStarted", b =>
                {
                    b.HasBaseType("HospitalLibrary.EventSourcing.Infrastructure.DomainEvent");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("ExaminationStarted");
                });

            modelBuilder.Entity("HospitalLibrary.EventSourcing.Model.ExaminationEvents.RecipesCreated", b =>
                {
                    b.HasBaseType("HospitalLibrary.EventSourcing.Infrastructure.DomainEvent");

                    b.HasDiscriminator().HasValue("RecipesCreated");
                });

            modelBuilder.Entity("HospitalLibrary.EventSourcing.Model.ExaminationEvents.ReportEntered", b =>
                {
                    b.HasBaseType("HospitalLibrary.EventSourcing.Infrastructure.DomainEvent");

                    b.HasDiscriminator().HasValue("ReportEntered");
                });

            modelBuilder.Entity("HospitalLibrary.EventSourcing.Model.ExaminationEvents.SymptomsSelected", b =>
                {
                    b.HasBaseType("HospitalLibrary.EventSourcing.Infrastructure.DomainEvent");

                    b.HasDiscriminator().HasValue("SymptomsSelected");
                });

            modelBuilder.Entity("AllergenMedicalRecord", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Allergen", null)
                        .WithMany()
                        .HasForeignKey("AllergensAllergenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Model.MedicalRecord", null)
                        .WithMany()
                        .HasForeignKey("MedicalRecordsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorPatient", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsDoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Model.Patient", null)
                        .WithMany()
                        .HasForeignKey("PatientsPatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Appointment", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId");

                    b.HasOne("HospitalLibrary.Core.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("HospitalLibrary.Core.Model.PhysicianSchedule", null)
                        .WithMany("Appointments")
                        .HasForeignKey("PhysicianScheduleId");

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Bed", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Room", null)
                        .WithMany("Beds")
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.BloodTherapy", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.InpatientTreatmentTherapy", null)
                        .WithMany("BloodTherapies")
                        .HasForeignKey("InpatientTreatmentTherapyId");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Doctor", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Model.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.InpatientTreatment", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Bed", "Bed")
                        .WithMany()
                        .HasForeignKey("BedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalLibrary.Core.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bed");

                    b.Navigation("Patient");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.InpatientTreatmentTherapy", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.InpatientTreatment", "InpatientTreatment")
                        .WithMany()
                        .HasForeignKey("InpatientTreatmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InpatientTreatment");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Medicine", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Recipe", null)
                        .WithMany("Medicines")
                        .HasForeignKey("RecipeId");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.MedicineTherapy", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.InpatientTreatmentTherapy", null)
                        .WithMany("MedicineTherapies")
                        .HasForeignKey("InpatientTreatmentTherapyId");

                    b.HasOne("HospitalLibrary.Core.Model.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.PhysicianSchedule", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Recipe", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.ExaminationReport", null)
                        .WithMany("Recipes")
                        .HasForeignKey("ExaminationReportId");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Symptom", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.ExaminationReport", null)
                        .WithMany("Symptoms")
                        .HasForeignKey("ExaminationReportId");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Vacation", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.PhysicianSchedule", null)
                        .WithMany("Vacations")
                        .HasForeignKey("PhysicianScheduleId");
                });

            modelBuilder.Entity("HospitalLibrary.EventSourcing.Infrastructure.EventWrapper", b =>
                {
                    b.HasOne("HospitalLibrary.EventSourcing.Infrastructure.DomainEvent", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("HospitalLibrary.Feedbacks.Model.Feedback", b =>
                {
                    b.HasOne("HospitalLibrary.Core.Model.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.ExaminationReport", b =>
                {
                    b.Navigation("Recipes");

                    b.Navigation("Symptoms");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.InpatientTreatmentTherapy", b =>
                {
                    b.Navigation("BloodTherapies");

                    b.Navigation("MedicineTherapies");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.PhysicianSchedule", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Vacations");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Recipe", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("HospitalLibrary.Core.Model.Room", b =>
                {
                    b.Navigation("Beds");
                });
#pragma warning restore 612, 618
        }
    }
}
